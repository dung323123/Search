Exercise 1:
int binarySearch(int arr[], int left, int right, int x)
{
    if (left <= right)
    {
        int index = left + floor((right - left) / 2);

        cout << "We traverse on index: " << index << endl;

        if (arr[index] == x)
            return index;

        if (arr[index] > x)
            return binarySearch(arr, left, index - 1, x);

        return binarySearch(arr, index + 1, right, x);
    }

    return -1;
}
Exercise 2:
int interpolationSearch(int arr[], int left, int right, int x)
{
    if (left <= right && x >= arr[left] && x <= arr[right]){
        int search = left + (x - arr[left])*(right - left)/(arr[right] - arr[left]);
        cout<<"We traverse on index: "<<search<<endl;
        if (arr[search] == x) return search;
        else if (arr[search] < x) return interpolationSearch(arr, search+1, right, x);
        else return interpolationSearch(arr, left, search-1, x);
    }
    return -1;
}
Exercise 3:
int jumpSearch(int arr[], int x, int n) {
    // TODO: print the traversed indexes and return the index of value x in array if x is found, otherwise, return -1.
    int step = sqrt(n);
    int index = 0;
    while (arr[index] < x){
        cout<<index<<" ";
        index+=step;
    }
    if (index > n-1){
        index -= step;
        for (int i = index+1; i <= n; i++){
            cout<<i<<" ";
            if (arr[i] == x) return i;
        }
    }
    else {
        cout<<index;
        int a = index - step;
        if (arr[a] == x) return a;
        if (arr[index] == x) return index;
        for (int i = index - step+1; i< index; i++){
            cout<<" "<<i;
            if (arr[i] == x) return i;
        }
    }
    
    return -1;
}
Exercise 4:
bool findPairs(int arr[], int n, pair<int,int>& pair1, pair<int, int>& pair2)
{
   // TODO: If there are two pairs satisfy the condition, assign their values to pair1, pair2 and return true. Otherwise, return false.
   map<int, pair<int, int> > Hash;
 
    // Traverse through all possible pairs of arr[]
    for (int i = 0; i < n; ++i)
    {
        for (int j = i + 1; j < n; ++j)
        {
            int sum = arr[i] + arr[j];
            if (Hash.find(sum) == Hash.end()){
                Hash[sum]=make_pair(arr[i],arr[j]);
            }else 
            {
                pair1=Hash[sum];
                pair2= make_pair(arr[i],arr[j]);
                return true;
            }
        }
    }
    return false;
}
